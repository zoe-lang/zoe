#? (fn test (signature $T (var arg $T ~) $T) {})
fn test[$T](arg: $T) -> $T { }

#? (type Cbk ~ (signature ~ [(var a String ~) (var b Int ~)] void))
type Cbk is fn(a: String, b: Int) -> void

#? (var a ~ (fn ~ (signature ~ (var a Int 3) String) {a}))
var a = fn (a: Int = 3) -> String { a }

#? (var b ~ (fn ~ (signature ~ [(var a ~ ~) (var b ~ ~)] ~) {(+ a c)}))
var b = fn (a, b) { a + c }

#(?
  (fn ba
    (signature [$T $U] [(var a String ~) (var b $T ~)] $U)
    {}
  )
#)
fn ba[$T, $U](a: String, b: $T) -> $U {

}

#? (call (. a map) (fn ~ (signature $T (var a ~ ~) ~) {a}))
a.map(fn [$T](a) { a })


#? (call c [a b])
c(a, b)