
import 'io' as io

fn some_fn(arg: Something) -> Opt[Something] {
  # var res = arg?.prop('something').toto or 3
  var a = "hello !"
  arg is not none
  arg is Type1 | Type2 | Type3 {

  }
  # this is the same !
  if arg is Type1 || arg is Type2 || arg is Type3 {

  }

  if arg is not none {

  }

  if arg is none {
    return none
  }
  # smth escapes
  var smth = Something(value = 2)
  smth@ = Something()
  return @smth

}


struct OpenError(
  Error,
  file: String,
  perm: Access,
)

struct Toto(
  toto: Int,
  doudou: Yes,
) {

  method doStuff() -> Int {

    if var err = error.has(OpenError) {

    }

  }

# end struct Toto
}


type Opt[$T] ($T | none) {

  method then[$U](cbk: fn (obj: $T) -> $U) -> $U | none {

    if this is none { return none }
    return cbk(this)

    switch this {
      none -> none,
      else -> cbk(this)
    }

    return if this is not none { cbk(this) } else { none }
  }

}

type Test (Toto | Youpi) {

}

trait Youpi {

}

type Pouet (Toto | Int) {

  struct Pouet()

  #(?
    Yeaah
  #)
  method hello() {
    # The scope of this method accesses the outside scope, but not the symbols
    # defined on Pouet
  }

}


struct Card(
  color: Color,
  face: Figure | Int,
) {

  enum Color(
    treble,
    diamonds,
    hearts,
    spades,
  )

  enum Figure(
    ace,
    king,
    queen,
    jack,
  )

  fn yes() -> Card {
    return Card(
      color = Color.spades,
      face = Figure.ace,
    )
  }
}
