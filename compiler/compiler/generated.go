// Code generated by a lame .js file, DO NOT EDIT.

package zoe



func (parser *Parser) createAstFile(scope *Scope) *AstFile {
  var res = &AstFile{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (parser *Parser) createAstImport(scope *Scope) *AstImport {
  var res = &AstImport{}
  res.nodeBase.create(parser, scope)
  return res
}



func (n *AstImport) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstImport) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstImport) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstImport) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstImport) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstImportModuleName(scope *Scope) *AstImportModuleName {
  var res = &AstImportModuleName{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstVarDecl(scope *Scope) *AstVarDecl {
  var res = &AstVarDecl{}
  res.nodeBase.create(parser, scope)
  return res
}



func (n *AstVarDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstVarDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstVarDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstVarDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstVarDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstNamespaceDecl(scope *Scope) *AstNamespaceDecl {
  var res = &AstNamespaceDecl{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstNamespaceDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstNamespaceDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstNamespaceDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstNamespaceDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstNamespaceDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstImplement(scope *Scope) *AstImplement {
  var res = &AstImplement{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstImplement) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstImplement) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstImplement) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstImplement) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstImplement) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstTemplateParam(scope *Scope) *AstTemplateParam {
  var res = &AstTemplateParam{}
  res.nodeBase.create(parser, scope)
  return res
}



func (n *AstTemplateParam) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstTemplateParam) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstTemplateParam) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstTemplateParam) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstTemplateParam) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstEnumDecl(scope *Scope) *AstEnumDecl {
  var res = &AstEnumDecl{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstEnumDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstEnumDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstEnumDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstEnumDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstEnumDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstUnionDecl(scope *Scope) *AstUnionDecl {
  var res = &AstUnionDecl{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstUnionDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstUnionDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstUnionDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstUnionDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstUnionDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstStructDecl(scope *Scope) *AstStructDecl {
  var res = &AstStructDecl{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstStructDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstStructDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstStructDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstStructDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstStructDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstTraitDecl(scope *Scope) *AstTraitDecl {
  var res = &AstTraitDecl{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstTraitDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstTraitDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstTraitDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstTraitDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstTraitDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstTypeAliasDecl(scope *Scope) *AstTypeAliasDecl {
  var res = &AstTypeAliasDecl{}
  res.nodeBase.create(parser, scope)
  res.membered.create(parser, scope)
  return res
}



func (n *AstTypeAliasDecl) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstTypeAliasDecl) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstTypeAliasDecl) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstTypeAliasDecl) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstTypeAliasDecl) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstFn(scope *Scope) *AstFn {
  var res = &AstFn{}
  res.nodeBase.create(parser, scope)
  return res
}



func (n *AstFn) SetLocal() bool {
  return n.named.SetLocal()
}


func (n *AstFn) SetExtern() bool {
  return n.named.SetExtern()
}


func (n *AstFn) IsLocal() bool {
  return n.named.IsLocal()
}


func (n *AstFn) IsExtern() bool {
  return n.named.IsExtern()
}


func (n *AstFn) GetName() *AstIdentifier {
  return n.named.GetName()
}


func (parser *Parser) createAstBlock(scope *Scope) *AstBlock {
  var res = &AstBlock{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstFnCall(scope *Scope) *AstFnCall {
  var res = &AstFnCall{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIndexCall(scope *Scope) *AstIndexCall {
  var res = &AstIndexCall{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstDerefOp(scope *Scope) *AstDerefOp {
  var res = &AstDerefOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstPointerOp(scope *Scope) *AstPointerOp {
  var res = &AstPointerOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstReturnOp(scope *Scope) *AstReturnOp {
  var res = &AstReturnOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstTakeOp(scope *Scope) *AstTakeOp {
  var res = &AstTakeOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIso(scope *Scope) *AstIso {
  var res = &AstIso{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstMulBinOp(scope *Scope) *AstMulBinOp {
  var res = &AstMulBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstDivBinOp(scope *Scope) *AstDivBinOp {
  var res = &AstDivBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstAddBinOp(scope *Scope) *AstAddBinOp {
  var res = &AstAddBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstSubBinOp(scope *Scope) *AstSubBinOp {
  var res = &AstSubBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstModBinOp(scope *Scope) *AstModBinOp {
  var res = &AstModBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstPipeBinOp(scope *Scope) *AstPipeBinOp {
  var res = &AstPipeBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstAmpBinOp(scope *Scope) *AstAmpBinOp {
  var res = &AstAmpBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstLShiftBinOp(scope *Scope) *AstLShiftBinOp {
  var res = &AstLShiftBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstRShiftBinOp(scope *Scope) *AstRShiftBinOp {
  var res = &AstRShiftBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstAndBinOp(scope *Scope) *AstAndBinOp {
  var res = &AstAndBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstOrBinOp(scope *Scope) *AstOrBinOp {
  var res = &AstOrBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstGtBinOp(scope *Scope) *AstGtBinOp {
  var res = &AstGtBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstGteBinOp(scope *Scope) *AstGteBinOp {
  var res = &AstGteBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstLtBinOp(scope *Scope) *AstLtBinOp {
  var res = &AstLtBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstLteBinOp(scope *Scope) *AstLteBinOp {
  var res = &AstLteBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstEqBinOp(scope *Scope) *AstEqBinOp {
  var res = &AstEqBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstNeqBinOp(scope *Scope) *AstNeqBinOp {
  var res = &AstNeqBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIsBinOp(scope *Scope) *AstIsBinOp {
  var res = &AstIsBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIsNotBinOp(scope *Scope) *AstIsNotBinOp {
  var res = &AstIsNotBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstDotBinOp(scope *Scope) *AstDotBinOp {
  var res = &AstDotBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstCastBinOp(scope *Scope) *AstCastBinOp {
  var res = &AstCastBinOp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstNone(scope *Scope) *AstNone {
  var res = &AstNone{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstTrue(scope *Scope) *AstTrue {
  var res = &AstTrue{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstFalse(scope *Scope) *AstFalse {
  var res = &AstFalse{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIntLiteral(scope *Scope) *AstIntLiteral {
  var res = &AstIntLiteral{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstStringLiteral(scope *Scope) *AstStringLiteral {
  var res = &AstStringLiteral{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstThisLiteral(scope *Scope) *AstThisLiteral {
  var res = &AstThisLiteral{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstVoidLiteral(scope *Scope) *AstVoidLiteral {
  var res = &AstVoidLiteral{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstCharLiteral(scope *Scope) *AstCharLiteral {
  var res = &AstCharLiteral{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIdentifier(scope *Scope) *AstIdentifier {
  var res = &AstIdentifier{}
  res.create(parser, scope)
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstArrayOrSlice(scope *Scope) *AstArrayOrSlice {
  var res = &AstArrayOrSlice{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstStringExp(scope *Scope) *AstStringExp {
  var res = &AstStringExp{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstIf(scope *Scope) *AstIf {
  var res = &AstIf{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstWhile(scope *Scope) *AstWhile {
  var res = &AstWhile{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstSwitch(scope *Scope) *AstSwitch {
  var res = &AstSwitch{}
  res.nodeBase.create(parser, scope)
  return res
}



func (parser *Parser) createAstSwitchArm(scope *Scope) *AstSwitchArm {
  var res = &AstSwitchArm{}
  res.nodeBase.create(parser, scope)
  return res
}


