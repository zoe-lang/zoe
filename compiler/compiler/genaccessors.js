#!/usr/bin/env node
const fs = require('fs')
const path = require('path')

const input = fs.readFileSync(path.join(__dirname, './nodes.go'), 'utf-8')

const names = []

console.log(`// Code generated by a lame .js file, DO NOT EDIT.

package zoe

`)

var tpl_create = Template(`
func (n Node) Repr() string {
  switch n.Kind() {
%% for (let n of v.nodes) { %%
  case {{n.name}}: return {{n.exp}}
%% } %%
  }
  return "<!!!>"
}

func (n Node) DebugName() string {
  switch n.Kind() {
%% for (let n of v.nodes) { %%
    case {{n.name}}: return "{{n.name}}"
%% } %%
  }
  return "<!!!>"
}

%% for (let n of v.nodes.filter(n => n.create.length)) { %%
func (n Node) set{{
    n.name.replace('NODE', '').toLowerCase().replace(/_[a-z]/g, m => m[1].toUpperCase())
  }}Children({{n.create.map(c => c + ' Node').join(', ')}}) {

  if n.Kind() != {{n.name}} {
    panic("!!")
  }
  n.setChildren({{n.create.join(', ')}})
}

func (tk Tk) create{{
  n.name.replace('NODE', '').toLowerCase().replace(/_[a-z]/g, m => m[1].toUpperCase())
}}(ctx Context, {{n.create.map(c => c + ' Node').join(', ')}}) Node {
return tk.createNode(ctx, {{n.name}}, {{n.create.join(', ')}})
}

%% } %%
`)

// console.log(input)
const re_type = /^\s+(NODE_[_A-Z]+).*?\/\/(.*?)(?::::(.*))?$/gm
const re_atom = /"[^"]+"|[^\s]+/g

var match
const nodes = []
while (match = re_type.exec(input)) {

  // console.log(match[1], match[2])
  var nodename = match[1]
  const create = []
  const format = match[2].trim()
  // var match2
  // while (match2 = re_atom.exec(match[2])) {
  //   var s = match2[0]
  //   format.push(s === '...' ? 'f.PrintNodeList(w, NodePosition(n.Value))': `w.Write([]byte(${s}))`)
  // }

  var create_match = match[3]
  if (create_match) {
    for (let c of create_match.trim().split(/\s+/g)) {
      create.push(c)
    }
  }

  nodes.push({
    name: nodename,
    exp: format,
    create
  })
}
// console.log(nodes)
console.log(tpl_create({nodes}))
// console.log(nodes)

// console.log(types)

/**
 * A simple templating function stolen from https://krasimirtsonev.com/blog/article/Javascript-template-engine-in-just-20-line
 */
function Template(tpl) {

  // 1 trim left
  // 2 exp
  // 3 trim right
  // 4 trim left
  // 5 fnbody
  // 6 trim right
  const re_tag = /\{\{(\-)?((?:(?!\}\})[^])+)?(\-)?\}\}|%%(\-)?((?:(?!%%)[^])*)(\-)?%%/g

  var fncode = ['var __res = [];'], start = 0, match;

  function add(m) {
    fncode.push('__res.push(`' + tpl.substr(start, m.index - start) + '`)')
    if (m[2]) {
      fncode.push(`__res.push(${m[2]})`)
    } else if (m[5]) {
      fncode.push(m[5])
    }
    // console.log(cursor, match)
  }

  while(match = re_tag.exec(tpl)) {
      add(match);
      start = match.index + match[0].length;
  }

  fncode.push('__res.push(`' + tpl.substr(start, tpl.length - start) + '`)');
  fncode.push(`return __res.join('');`);
  // code = code.replace(/[\r\t\n]+/g, ' ')
  var rescode = fncode.join('\n')
  // console.log(rescode)
  var fn = new Function('v', rescode)
  return (data) => fn(data);
}
