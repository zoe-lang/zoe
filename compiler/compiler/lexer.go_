package zoe

import (
	"strconv"
)

type tkstack struct {
	top  int
	prev *tkstack
}

func (t *tkstack) push() *tkstack {
	n := &tkstack{top: 0, prev: t}
	return n
}

func (t *tkstack) pop() *tkstack {
	return t.prev
}

type LexerError struct {
	Filename string
	Message  string
	Line     uint32
	Column   uint32
	Offset   uint32
}

func (l LexerError) Error() string {
	return l.Message
}

func (z *File) Lex() error {
	/*!types:re2c*/
	data, length := z.data, uint32(len(z.data))
	var offset uint32 = 0
	var start uint32 = 0
	var line uint32 = 0
	var col uint32 = 0
	cond := yyctop
	comment := 0 // recursive comments
	doc_comment := false
	var brace_stack *tkstack

	var marker uint32

	var updateLines = func() {
		for i := start; i < offset; i++ {
			char := data[i]
			if char == '\n' {
				line++
				col = 0
			} else {
				col++
			}
		}
	}

	var err = func() error {
		offset--
		updateLines()
		return LexerError{Message: "invalid input '" + string(data[offset]) + "' at offset " + strconv.Itoa(int(offset)), Line: line, Column: col, Offset: offset, Filename: z.Filename}
	}

	var addTokenBounds = func(kind TokenKind, offsetStart uint32, offsetEnd uint32) {
		n := Token{}
		// n.Value = string(value)
		n.Kind = kind
		n.Offset = start + offsetStart
		n.Length = offset - offsetEnd - (n.Offset)
		n.Line = line
		n.Column = col
		updateLines()

		start = offset

		z.Tokens = append(z.Tokens, n)

		// count lines and columns before adding
	}

	var addToken = func(kind TokenKind) {
		addTokenBounds(kind, 0, 0)
	}

	/*!re2c
			re2c:eof = 0;
			re2c:define:YYGETCONDITION = "cond";
			re2c:define:YYSETCONDITION = "cond = @@";
	    re2c:define:YYCTYPE = byte;          // configuration
	    re2c:define:YYPEEK = "data[offset]";  // configuration
	  	re2c:define:YYSKIP = "offset += 1";  // configuration
	  	re2c:define:YYBACKUP = "marker = offset";
	  	re2c:define:YYRESTORE = "offset = marker";
	  	re2c:define:YYLESSTHAN = "offset >= length - 1";
	    re2c:yyfill:enable = 0;              // configuration
	    // re2c:flags:nested-ifs = 1;           // configuration

			// keywords

			<top> $ { addToken(TK_EOF); return nil }
			<top> * { return err() }

			<top> [\n\t ]+ { addToken(TK_WHITESPACE); goto yyc_top }

			<top> "namespace" => top { addToken(KW_NAMESPACE); goto yyc_top }
			<top> "import"    => top { addToken(KW_IMPORT); goto yyc_top }
			<top> "export"    => top { addToken(KW_EXPORT); goto yyc_top }
			<top> "as"        => top { addToken(KW_AS); goto yyc_top }

			<top> "local"     => top { addToken(KW_LOCAL); goto yyc_top }

	  	<top> "var"       => top { addToken(KW_VAR); goto yyc_top }
			<top> "const"     => top { addToken(KW_CONST); goto yyc_top }
			<top> "type"      => top { addToken(KW_TYPE); goto yyc_top }
			<top> "fn"        => top { addToken(KW_FN); goto yyc_top }
			<top> "method"    => top { addToken(KW_METHOD); goto yyc_top }
			<top> "enum"      => top { addToken(KW_ENUM); goto yyc_top }
			<top> "trait"     => top { addToken(KW_TRAIT); goto yyc_top }
			<top> "implement"     => top { addToken(KW_IMPLEMENT); goto yyc_top }
			<top> "struct"    => top { addToken(KW_STRUCT); goto yyc_top }

			<top> "for"       => top { addToken(KW_FOR); goto yyc_top }
			<top> "in"        => top { addToken(KW_IN); goto yyc_top }
			<top> "while"     => top { addToken(KW_WHILE); goto yyc_top }
			<top> "if"        => top { addToken(KW_IF); goto yyc_top }
			<top> "else"      => top { addToken(KW_ELSE); goto yyc_top }
			<top> "switch"      => top { addToken(KW_SWITCH); goto yyc_top }

			<top> "typeof"    => top { addToken(KW_TYPEOF); goto yyc_top }
			<top> "is"        => top { addToken(KW_IS); goto yyc_top }
			<top> "return"    => top { addToken(KW_RETURN); goto yyc_top }
			<top> "yield"     => top { addToken(KW_YIELD); goto yyc_top }
			<top> "none"      => top { addToken(KW_NONE); goto yyc_top }
			<top> "iso"       => top { addToken(KW_ISO); goto yyc_top }
			<top> "take"       => top { addToken(KW_TAKE); goto yyc_top }
			<top> "void"      => top { addToken(KW_VOID); goto yyc_top }
			<top> "this"      => top { addToken(KW_THIS); goto yyc_top }
			<top> "true"      => top { addToken(KW_TRUE); goto yyc_top }
			<top> "false"      => top { addToken(KW_FALSE); goto yyc_top }

	  	<top> [$A-Za-z_] [_$A-Za-z0-9]* => top { addToken(TK_ID); goto yyc_top }
			<top> [0-9]+ => top { addToken(TK_NUMBER); goto yyc_top }

			<top> "\\" ("\\" [anbtsfvxr] | [^\n \a\t\b\v\r])  { addToken(TK_CHAR); goto yyc_top }

			<top> "("   { addToken(TK_LPAREN); goto yyc_top }
			<top> ")"   { addToken(TK_RPAREN); goto yyc_top }
			<top> "["   { addToken(TK_LBRACE); goto yyc_top }
			<top> "]"   { addToken(TK_RBRACE); goto yyc_top }
			<top> "{"   {
				addToken(TK_LBRACKET)
				if brace_stack != nil {
					brace_stack.top++
				}
				goto yyc_top
			}
			<top> "}"   {
				addToken(TK_RBRACKET)
				if brace_stack != nil {
					if brace_stack.top == 0 {
						brace_stack = brace_stack.pop()
						goto yyc_str
					}
				}
				goto yyc_top
			}
			<top> "!"   { addToken(TK_EXCLAM); goto yyc_top }
			<top> "<"   { addToken(TK_LT); goto yyc_top }
			<top> ">"   { addToken(TK_GT); goto yyc_top }
			<top> "|"   { addToken(TK_PIPE); goto yyc_top }
			<top> "/"   { addToken(TK_DIV); goto yyc_top }
			<top> "/="  { addToken(TK_DIVEQ); goto yyc_top }
			<top> "..." { addToken(TK_ELLIPSIS); goto yyc_top }
			<top> "."   { addToken(TK_DOT); goto yyc_top }
			<top> ","   { addToken(TK_COMMA); goto yyc_top }
			<top> ":"   { addToken(TK_COLON); goto yyc_top }
			<top> "::"   { addToken(TK_COLCOL); goto yyc_top }
			<top> ";"   { addToken(TK_SEMICOLON); goto yyc_top }
			<top> "+"   { addToken(TK_PLUS); goto yyc_top }
			<top> "+="  { addToken(TK_PLUSEQ); goto yyc_top }
			<top> "++"  { addToken(TK_PLUSPLUS); goto yyc_top }
			<top> "-"   { addToken(TK_MIN); goto yyc_top }
			<top> "-="  { addToken(TK_MINEQ); goto yyc_top }
			<top> "--"  { addToken(TK_MINMIN); goto yyc_top }
			<top> "*"   { addToken(TK_STAR); goto yyc_top }
			<top> "*="  { addToken(TK_STAREQ); goto yyc_top }
			<top> "&"   { addToken(TK_AMP); goto yyc_top }
			<top> "&="  { addToken(TK_AMPEQ); goto yyc_top }
			<top> "%"   { addToken(TK_MOD); goto yyc_top }
			<top> "%="  { addToken(TK_MODEQ); goto yyc_top }
			<top> "="   { addToken(TK_EQ); goto yyc_top }
			<top> "=="  { addToken(TK_EQEQ); goto yyc_top }
			// <top> "=>"  { addToken(TK_FATARROW); goto yyc_top }
			<top> "->"  { addToken(TK_ARROW); goto yyc_top }
			<top> "!="  { addToken(TK_NOTEQ); goto yyc_top }
			<top> "@"   { addToken(TK_AT); goto yyc_top }
			<top> "?"   { addToken(TK_QUESTION); goto yyc_top }
			<top> "?."  { addToken(TK_QUESTIONDOT); goto yyc_top }
			<top> "?="  { addToken(TK_QUESTIONEQ); goto yyc_top }

			<top> "#(" { doc_comment = false; comment++; goto yyc_comment }
			<top> "#(?" { doc_comment = true; comment++; goto yyc_comment }
			<top> "#?" [^\n]* { addToken(TK_DOCCOMMENT); goto yyc_top }
			<top> "#" [^\n]* { addToken(TK_COMMENT); goto yyc_top }
			<top> "\"" => str { addToken(TK_QUOTE); goto yyc_str }
			<top> "'" ([^'] | "\\'")* "'" { addTokenBounds(TK_RAWSTR, 1, 1); goto yyc_top }

			<comment> [^#]+ :=> comment
			<comment> "#" :=> comment
			<comment> "#(" { comment++; goto yyc_comment }
			<comment> "#)" { comment--; if comment == 0 {
				if doc_comment {
					addToken(TK_DOCCOMMENT)
				} else {
					addToken(TK_COMMENT)
				}
				goto yyc_top
				} else { goto yyc_comment } }
			<comment> $ { err() }

			<str> "\\" . => str { addToken(TK_CHAR); goto yyc_str }
			<str> "\"" => str { addToken(TK_QUOTE); goto yyc_top }
			<str> "{" => top {
				addToken(TK_LBRACKET)
				brace_stack = brace_stack.push()
				goto yyc_top
			}
			<str> [^"\\{]+ => str { addToken(TK_RAWSTR); goto yyc_str }

			<str> * { return err() }
			<str> $ { return err() }
	*/

	return nil
}
