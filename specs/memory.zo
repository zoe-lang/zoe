#(?

  Is it possible, by tracking the life time of values, to infer where arena allocation
  makes more sense than lasting allocation ?
  Maybe track the roots of coroutines ?

  AT THE BEGINNING, LET'S JUST HAVE SOME BIG CONTINUOUS ALLOCATOR TO FLESH OUT STUFF.

  Whatever happens, we will need some solid escape analisis, if only for the fact
  that there is no explicit heap allocation.

  Prevent array decay ; addresses of indexed elements from a slice or array
  may not outlive their parent variable (and like the rest of pointers, may not
  cross region boundaries). The same goes for structures ; pointers to a non-pointer
  part of a structure follows the same rule !

  Three possibilities to write concurrent code ;
   - @manual, a manually managed space, where the user is expected to perform
     his own stop-the-world GC
   - copy between coroutines, the simplest, default approach, where memory is manually
     copied into the destination (and the root is made available once it is done)
   - @named regions, where whole regions are transfered to other coroutines.
     The main interest is that a named region can be prepared/manipulated in complex
     ways before being sent, and that work can be actually distributed.

  Always possible to opt out from separate buckets ; just have the data be copied,
  which will be transparent to the user, which is the recommanded case for
  small data sets (that get copied quick).

  Possible to treat the type as non-null, but then it is impossible to give it.
  Unique ptrs may not be given (escape) to *anything* when they're treated as
  non-null, because that means ultimately their reference cannot be erased.

  * Unique ptr is necessarily a root to its own bucket
  * Unique ptr is necessarily put in a unique*Type | null container
  * Unique ptr can be passed as a non-null, non-unique pointer receiver if and
      only if the receiver cannot outlive it and cannot cross boundaries.

  ## We need a precise GC !

  ## What GC is used ?

  Buckets !

  Issues faced ;
   - Synchronizing garbage collectors leads to pause-the-world
   - Heaps have to be isolated to not have to synchronize them
   - Heap pointers may not point to another heap
   - Traditionally, data needs to be copied between heaps to avoid having references
     - This gets prohibitive when data is complex (think linked list, etc.), because
       copy has to traverse all the structures and create new references/allocate/etc.

   : So we share heaps instead of variables. Only one greenlet accesses a given heap
     at a time.
      - Heaps can be passed around, but then a greenlet may not have *any* reference
        left to a heap it gave to another greenlet, unless the heap contains data
        that is completely immutable (? but then we can't deallocate it.)
      - We need to find a way to *prevent* completely pointer sharing.

    - It is very much possible to get another region and merge it into @local,
      treating its blocks as part of the local blocks.

  ## When does a pointer escape ?
   * distinction between escaping from the stack, and escaping to another heap.
   * Escapes when returned from a scope (at least from the scope)
   * Escapes when aliased into a container (such as a struct or array)
   * When aliased into another variable (who may itself escape)

  ## Isolated regions
   * Can not have pointers to other regions. Other regions may not point to them
   * Can be merged

  # What we need to do ;
    - for all functions, on top of doing escape analysis of their arguments / return, track
      *WHERE* they might/definitely escape to.
#)

fn main() {
  # Inside an isolate block, all memory creation is done in another, "virtual" context,
  # where the data created inside may only point toward themselves and not outside.
  # Variables from different memory contexts can only be compared together or used for
  # copying purposes.
  #
  # Functions can be called as usual, but the compiler detects how the functions use
  # their arguments and closures and how data flows between them, and disallows function
  # calls where data transits between two different contexts.
  # Case about closures ; a callback in an isolate may not close on a variable that comes
  # from outside, unless it is immutable.
  #
  # Since an isolate is unique across the whole application, its type is always | none
  var myvar = iso {
    # Do a lot of stuff in isolation
    # The result of this block is an isolated root to something
    # As the type of myvar is not specified, it will be infered as the return expression of the block,
    # with all arms of the resulting union marked as isolate, and a | none
  }

  # The take statement is used to take a value from an isolate and integrate it to the
  # current context.
  # Here, take myvar ends myvar's isolate status
  var pouet = take myvar

  # The rest of the time, when using
  some_container[0] = some_isolate
  # the compiler automatically clears some_isolate and makes it none
  # This works with container values as well
  var take_it = some_isolate_slice[0] # some_isolate_slice may only be Slice[isolate Type | none]
  some_function(some_isolate) # This also takes the isolate with it and sets its original value to none

  var myvar2 = iso {
    # We take another isolate if we want to return a new value based on them.
    var inner_myvar = take myvar
    # ...
  }

  # An iso[...] always has to include | none somewhere, or is that implicit
  # For now, I'd rather have to see it everywhere.
  var some_isolate: iso[MyStructure] | none
  var some_isolate2: iso[*MyStructure] | String | none

  while !((var val = ch.receive()) is Channel.EOF) {
    # val is an isolate
    var loc = take val # this ends val's isolate status
    # but what happens to val ?
    # How does the compiler know that it is not usable anymore ?

    if some_condition {
      var log = take val
    } else {
      # In here, it is *clear* that val was not taken.
    }

    # In here, not so much.
    # val is not usable anymore. Which means that it will be collected.
    # Maybe take works with | null if required ?

    if some_condition {
      var log = take val
      # In here, we end the scope where val lives, so it is clear that
      # whatever follows this if block has val still being in charge.
      continue
    }

    # ... ? if some_condition was right, then val should not be usable anymore.
    # what
    val.doSomething()

    # In here we just get the value.
  }

  # Do const isolates need to be ARC ?
}

type Channel[$T] is opaque { # is it opaque though ? Can't it be implemented in zoe ?
  method receive() -> $T | Channel.EOF | error {

  }

  method receiveIsolate() -> isolate* $T | Channel.EOF {

  }

  #(?
    Close the channel. After this point, the channel will just give EOF to
    any receive() called upon it.
  #)
  method close() -> error | nothing {

  }

  method send(value: $T) -> error | nothing {

  }

  method sendIsolate(val: iso[*$T] | none) -> error | nothing {
    # We have to figure out if the type handled is a simple variable that will be copied
    # or if we have an isolate that we can safely pass around.
    # How do we prevent useless copies though ?
  }
}
