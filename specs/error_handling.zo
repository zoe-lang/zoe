#(
  Zoe uses error by values.
  Errors are handled specially by the compiler, notably to make error handling
  a little easier in regards to call-stack management.

  Types don't have RTTI, but they have an int value, which indicates at least if they're
  an error or not.
  DISCUSSION: There is no way at runtime to get the traits implemented by a given type.
              This may only happen at compile time.
              The reason being that it is most likely a slow operation.
              Oooor, a type may be cast into an implementing interface if requested,
              which would mean that a type is always
              {is_error, types_len, struct1, struct2, trait1, trait2, trait3} ?

  Objectives are ;
    - The compiled code must be able to differentiate an error from a regular
      type with a single comparison
      Errors could be tagged unions by default, or something.
    - Errors are varied and might embark different kind of information. The programmer
      must be able to differentiate between the types easily without necessarily
      having to specify all the errors types a function might return (because this
      is really cumbersome)
        * maybe the compiler could just offer the error return type by default
          and offer to extract the information of which errors are returned
          by a given function as a bonus from inference.
        * Or maybe we use the Return[$T] type, which has any as its error or something.
    - Adding stack information should almost be a noop so that error generation
      is as fast as possible and does not slow down the program
        * error creation sites should thus be generated at compile time
        * stack information is something that should be able to be left off for
          releases
    - Unhandled errors should be flagged as compilation error so that errors don't
      go unnoticed. This should probably be done as checking that a given variable
      doesn't reach the end of control flow with still "| error" in its type.

  Things to avoid
    - Forcing the programmer to check for all error types all the time, since these could change.
#)

# Does all sort of things
# And does them well
struct ErrorLocation {
  filename: String = $.vars.current_file
  line: Size = $.vars.current_line
  column: Size = $.vars.current_column
  prev: *ErrorLocation | null
}

# Somewhere, in the compiler
struct Error {
  message: String
  payload: any
  location: *ErrorLocation

  method wrap(err: *Error) -> *Error {
    err.wrapped = this # this is always a pointer
    return err
  }

}

# The compiler should enforce the fact that a type that embarks error
# as a component must end its name with "Error"
struct AccessError {
  filename: String
}

# The compiler knows that FileError is an error, and thus allows for it to be used in try blocks
fn test() -> Int32 | error {
  if some_condition {
    return 32
  }
  return io.AccessError(message = 'Something happened', filename = 'Yes')
}

# error is like any, except it's only error types
fn test2() -> Result[SomeResult] {

  # The or operator binds to the left and returns the left expression if it has no error
  # or the evaluation of the right if it had one.
  #
  # Why not catch ? Because catch does not really symbolize the fact that there
  # is coalescing. Generally, it comes from languages that don't use the fact
  # that blocks have values. Also, it is the logical antonym to throw, which
  # is really linked with exceptions and the fact that an exception travels up
  # the stack, whereas Zoe errors are just values like rust.
  var ve = someFunc() or { return error } # or defines error as a value in its rightmost arm

  # Or operators can be chained


  var ve3 = someFunc() or return error

  # At top level.
  someFunc() or return error

  errdefer this.close()

  someOtherFunc() or return error

  # An unchecked error is an error. If this function returns an error,
  # then the compiler will complain that it should have been checked.
  someThingThatMayError()

  # To suppress the error, one can just use or void, which is about its
  # only possible use outside of a function return type...
  # NB: maybe something like or ignore ?
  # Or maybe there could be a pragma.
  someThingThatMayError() or void

  # The following is *ugly*. But that may be preferible, since we *want* the developper
  # to handle the error case.
  # Then again, it's less "idiomatic"
  # Although we can grep on ignore-unchecked-error, we can also grep on "or void", even
  # if "or void" means that we need to know "more" of the language to understand why
  # it is being used.
  # I feel that the second option is more readable, though.
  # Plus, with some highlighting it becomes pretty visible.

  #!ignore-unchecked-error: because we really don't care if the operation did not succeed.
  someThingThatMayError()

  var ve2 = someFunc() or {
    # or may of course have a block in which the error variable is set
    if error is FileAccessError {
      null
    }
    return error
  }

  # Some times, it makes more sense to consider several operations in a row
  # as part of a same, longer, operation, in which an error happening at any
  # point invalidates the operation in its entirety.
  #
  # In this case, pepering each operation with `or` blocks can become too heavy on the eyes.
  try {
    var stuff = parsePouet() # An unchecked error interrupts the flow of a try block
    stuff.doSomethingDangerous()

    # Errdefer will run at the end of the block if the control got up to this point,
    # and will do so only if an error was left unchecked or if the function returned
    # an error.
    errdefer closeSomething()

    stuff.evenMoreDanger()
  } or {
    # error is the union of errors that come from the try block
    switch error {
      | SomeError -> 42 # In this block, error is narrowed to SomeError
      | else -> return error.forward(MyOwnError(message = 'Well this is messed up'))
    }
  }

  var val = switch typeof te
    | Error | FileError { return te }
    else { 42 }

  if te is Error or te is FileError {
    return te
  }
  # or
  var te = try test() catch (err) {
    return err.wrap(SomeError('yo.', field = 'doing stuff', other_info = 3432))
  }

  # try catch with a block is not implemented because we want to force the hand
  # of the programmer to explicitely handle errors when they happen
}