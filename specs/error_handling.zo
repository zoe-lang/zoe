#(
  Zoe uses error by values.
  Errors are handled specially by the compiler, notably to make error handling
  a little easier in regards to call-stack management.

  Types don't have RTTI, but they have an int value, which indicates at least if they're
  an error or not.
  DISCUSSION: There is no way at runtime to get the traits implemented by a given type.
              This may only happen at compile time.
              The reason being that it is most likely a slow operation.
              Oooor, a type may be cast into an implementing interface if requested,
              which would mean that a type is always
              {is_error, types_len, struct1, struct2, trait1, trait2, trait3} ?

  Objectives are ;
    - The compiled code must be able to differentiate an error from a regular
      type with a single comparison
      Errors could be tagged unions by default, or something.
    - Errors are varied and might embark different kind of information. The programmer
      must be able to differentiate between the types easily without necessarily
      having to specify all the errors types a function might return (because this
      is really cumbersome)
        * maybe the compiler could just offer the error return type by default
          and offer to extract the information of which errors are returned
          by a given function as a bonus from inference.
        * Or maybe we use the Return[$T] type, which has any as its error or something.
    - Adding stack information should almost be a noop so that error generation
      is as fast as possible and does not slow down the program
        * error creation sites should thus be generated at compile time
        * stack information is something that should be able to be left off for
          releases
    - Unhandled errors should be flagged as compilation error so that errors don't
      go unnoticed. This should probably be done as checking that a given variable
      doesn't reach the end of control flow with still "| error" in its type.

  Things to avoid
    - Forcing the programmer to check for all error types all the time, since these could change.
#)

# Does all sort of things
# And does them well
type ErrorLocation is struct (
  filename: String = $.vars.current_file
  line: Size = $.vars.current_line
  column: Size = $.vars.current_column
  prev: *ErrorLocation | null
)

# Somewhere, in the compiler
type Error is struct (
  message: String
  payload: any
  location: *ErrorLocation
)
implements {

  method wrap(err: *Error) -> *Error {
    err.wrapped = this # this is always a pointer
    return err
  }

}

# The compiler should enforce the fact that a type that embarks error
# as a component must end its name with "Error"
type AccessError is error + struct (
  filename: String
)

# The compiler knows that FileError is an error, and thus allows for it to be used in try blocks
fn test() -> Int32 | error {
  if some_condition {
    return 32
  }
  return io.AccessError(message = 'Something happened', filename = 'Yes')
}

# error is like any, except it's only error types
fn test2() -> Result[SomeResult] {
  var te = try test() catch te.wrap(FileError('mais naan'))

  var val = switch typeof te
    | Error | FileError { return te }
    else { 42 }

  if te is Error or te is FileError {
    return te
  }
  # or
  var te = try test() catch (err) {
    return err.wrap(SomeError('yo.', field = 'doing stuff', other_info = 3432))
  }

  # try catch with a block is not implemented because we want to force the hand
  # of the programmer to explicitely handle errors when they happen
}