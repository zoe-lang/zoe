#(
  as in rust, some core traits are looked up by the compiler for some better syntax.
  Or does it ?
#)

import 'core' ( Iterator, Add, Substract, GetIndex, SetIndex )

namespace MyType {
  fn new() -> MyType {
    # ...
  }
}

type MyType is struct (
  arr: Slice[*Slice[*SomeOtherType]] # Slices are baked into the language
) implements GetIndex =  {
  fn getIndex(idx: Int) -> Int {
    this.arr[idx]
  }
}

# What about slices of several dimensions ?
# In effect when creating slices, we could request
# the size of the len + the size of the pointer for the original
# piece of array
type Slice[$T] is struct (
  len: Int
  ptr: *$T # Pointer !

) implements {

  method slice(start: Int, end: Int) -> Slice<$T> {
    return Slice[$T](len = end - start, ptr = this.ptr + start)
  }

}

namespace Slice {

  fn new[$T](l: Int) -> Slice<$T> {
    return Slice<$T>(
      len = l,
      ptr = mem.alloc[$T](l) # Is alloc builtin ?
    )
  }

}


type Char is UInt8 implements {
  method isUtf8Codepoint() -> Boolean { stub }
}

type Rune is UInt

type String is Slice[Char] implements {

}

namespace String {

  # Take in a pointer. Pointers are unsafe.
  fn fromCString(cstring: *Char) -> String {
    # Compute the size.
    let start = cstring
    while *cstring != Char(0) {
      # While the string is not null terminated
      cstring++
    }
    return String(ptr = cstring - start, len = count)
  }

}


type Map[$Key: Map.Hashable, $Value] is struct (
  arr: ($Value | null)[]
) implements {
  # ...

  method get(idx: $Key) -> $Value | null {
    # Collision ?
    let hs = hash.get_int_hash(idx) % this.arr.length
    return this.arr[hs]
  }

  #(
    Standard hashable store
  #)
  method set(idx: $Key, value: $Value) -> $Value {
    let hs = hash.get_int_hash(idx) % this.arr.length
    # check for collision !
    this.arr[hs] = value
    return value
  }

  method values() -> Map.ValueIterator[$Value] { return Map.ValueIterator.new[$Value](this) }
  method keys() -> Map.KeyIterator[$Key] { return Map.KeyIterator.new[$Key](this) }
  method pairs() -> Map.PairIterator[$Key, $Value] { return Map.PairIterator[$Key, $Value].new(this) }
}

namespace Map.ValueIterator {
  # any is unusable
  type ValueIterator[$Value] is struct (

  ) implements Iterator[$Value] {

  }

  fn new[$Value](map: Map[$Value, any]) -> ValueIterator[$Value] { }
}

fn main() {
  let m = Map.new[String, String](200)
  m.set('hello', 'world')
  m.set('pouet', 'hey')

  if String(test) = m.get('hello') {
    # String | Map.NoValue
    # ... do stuff !
  }

  for (key, value) in m.pairs() {
    log.print("${key}: ${value}")
  }
}
