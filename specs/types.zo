#(
  ...
#)

# Never is a special return type for a function that means that it will never
# return, such as a os.panic().
# It is otherwise handled as nothing, as in it can never be directly assigned
# to a value, and it is factored out of unions in the end.
never

# The universal union, with the caveat that it only handles pointers
# since we can't possibly hold the biggest object at all times in any.
# In a way, it kinda works like traits in-memory.
any

# Null is both a type and a value
null

# error is a type, except in or right side operands where they are the current
# error processed by the or block.
error

# Nothing is mostly a type, except when used as the right side of `or` to mean
# the error is silenced.
# Nothing can not be put in a variable.
nothing
Bool
# Int is Int32 or Int64, depending on platform
UInt8
Int8
UInt16
Int16
UInt32
Int32
#...
Int64
Int128

Float16
Float32
Float64
Float # Float64 or Float32

# Structs
struct MyStruct {
  field: Int
  field2: Float32
}

# Enums
# Enum fields are constant
# Enums may mix types, in which case their type is an union
enum MyEnum {
  value: Int = 2
  second
  third
}

# Function pointer
var v: fn (a: Int) -> Void

# Pointer
# A pointer is not null
*MyStruct
# null has to be explicitely declared
type MyType2 is *MyStruct | null

# This is an alias. It keeps all of its methods and trait implementations.
# Variables of MyType and OlderType are interchangeable, even though MyType
# can reimplement methods from OlderType or even completely new ones.
# Caveat : the variables *will* have to be casted explicitely.
type MyType is OlderType
# With an empty implement block, we mean that this is not just an alias, but
# a redefinition.
type MyType4 is OlderType { }


# union
type MyType3 is MyStruct | Int | null {
  # Code blocks for unions or aliases may not include fields
  method doStuff(a: Boolean) -> Boolean { !a }

  #(?
    Stuff ?
  #)
  method moreStuff() -> Int {

    # Switching on a union value accepts types as well as values
    # The type of a switch is a union type of its types
    switch this {
      2 -> { 4 },
      Zobi -> {
        # Do stuff with Zobi
      },
      Int -> switch this {
        2 -> 3,
        4 -> 5,
        6 -> 3,
        else -> -1
      },
      Float -> Float.toInt(this),
      MyStruct -> this.myField,
      null -> log.isNull(),
      else -> -1
    }

  }
}

# Traits resemble structs, except they have to be added to types
trait MyTrait {
  # A trait method may not be generic itself
  method doStuff(a: Int) -> Int
  method doSomeMoreStuff(b: String) -> String
}

# A trait may require the presence of another trait.
trait MyOtherTrait {
  implement MyTrait
  implement SomeOtherTrait
  method yes() -> { stub }
}

struct MyStruct4 {
  toto: Int # We do not expect a var here, this should be an error
  local b: Boolean # b will only be accessible from a redefinition of MyStruct

  method hello() -> Int {

  }

  # Note, if there already was a method that satisfies the trait
  # defined elsewhere on the type, then the trait is fine with it
  implement MyTrait {
    method myMethod() -> Int {
      if this.b { 34 } else { this.toto }
    }
  }

  # Generic traits may only be implemented once on a type.
  # Alias the type if the trait is to be reimplemented.
  # This means that there will be no to[Int]() to[String]()
  # methods, since that would be ambiguous.
  implement MyGenericTrait[Int] {

  }

  # The {} can be left out if the type already implements the trait
  # thanks to other methods.
  implement SomeOtherTrait

  # This will also ask for implementations of other traits.
  implement MyRequiringTrait
}


######################### PLAYGROUND ############################

# Traits may only be passed around as fat pointers
# This is the only time where dynamic dispatch is done.
fn someArray(arr: Slice[*MyTrait]) -> Result {
}

# This works
fn testStuff[$T: MyTrait](arr: slice[$T]) -> {

}

# What about unions of types that all implement the same trait ?
# No, a union has to be disambiguated first.

# Using traits directly as types is disallowed ?
var arr = Slice[MyTrait].new() # This does not work, because sizeof(MyTrait) gives an error.
var val: MyTrait # This won't work, because the size used by MyTrait is, in fact, unknown.
var val1: Something
var val2: Other
arr.push(val1) # This converts it to a val1@MyTrait(of Something)
arr.push(val2) # val2@MyTrait(of Other)
someArray(&arr)
return arr

# ... somewhere else
arr.push(val3) # val3@MyTrait(of SomethingElse) - which might be a lot bigger

fn makeSomeReader() -> Reader {
  # Since the return type is a trait, we still have to compute all the different types that be
  # returned that, in fact, are Readers.
  # It could be a TCP reader, and HTTP request, or even a file Reader
  # TCPRequest | HTTPRequest | FileReader as Reader ?
  # Maybe the list is infered ?
   # There is no such problem when returning a pointer. Or is there ?
  # Are traits fat pointers ?

  some_var: SomeType
}

# If we don't know the type in advance, then it means we need to store fat pointers...
# It's either that, or all types have their vtable added in their type definition
# But then it means when we copy them, we're "fucked" because it means overwriting the vtable pointer...
var some_slice = Slice[Dog | Cat].new()

# Functions that return traits must specify the underlying type, or do some kind of "Trait[dyn stuff]" like in Rust ?
# What about re-implementing some trait defined method ? The compiler must be aware that at least one type
# does so and opt into dynamic dispatch.
# In general, maybe the compiler should be aware of how traits are being used to disambiguate when it can.
# Nota : this only works when building stuff that use arguments coming from an unknown source.

############ The rest of the types are built upon the base types.

# Slices are not "special" ?
type Toto is Slice[Int]
type Toto2 is []Slice
type Toto3 is [3]Slice # an array of 3 elements.




# All type expressions (type, enum, trait, struct) may have method blocks
struct Pouet[$T] {
  field: String
  another_field: String
  field2: $T

  fn new() -> this {

  }

  method doStuff() -> void {
    log.info(this.field)
  }
}

#####################################################

trait Reader[$T] {
  method read(buffer: Slice[$T]) -> Int | error
  method isClosed() -> Boolean
}

trait Writer[$T] {
  method write(buffer: Slice[$T]) -> Int | error
}

trait Closer {
  method close() -> null | error
}

trait LineReader {
  # Pouet
  implement Reader[Char]

  #(?
    Adds a readLine method
  #)
  method readLine() -> String | error
}

trait ReadCloser[$T] {
  # A trait does not have to give an actual implementation to another, required trait
  implement Reader[$T]
  implement Closer
}
